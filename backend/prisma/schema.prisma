generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

enum ShoeSize {
  UK6
  UK7
  UK8
  UK9
  UK10
  UK11
}

enum ShoeColor {
  RED
  BLACK
  WHITE
  BLUE
  GREEN
  YELLOW
  GREY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

//
// MODELS
//
model Users {
  id         String     @id @default(uuid())
  name      String
  email      String     @unique
  password   String
  role       UserRole[]   @default([USER])
  verification_code String?
  verification_code_expiry DateTime?
  is_verified Boolean    @default(false)
  updated_at DateTime   @updatedAt
  created_at DateTime   @default(now())

  // relations
  sessions   Sessions[]
  products   Product[]        // if vendor
  orders     Order[]
  cart       Cart?
  wishlist   Wishlist?
}

model Sessions {
  id           String   @id @default(uuid())
  token String   @unique
  ip_address   String
  user_agent   String
  expire_at    DateTime
  created_at   DateTime @default(now())

  user_id      String
  user         Users    @relation(fields: [user_id], references: [id])
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String?
  brand         String?
  images        String[]
  price         Float
  discount_price Float?     // For promotional prices
  stock         Int         @default(0)
  is_active     Boolean     @default(true)
  currency      String      @default("INR")
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  vendor_id     String
  vendor        Users       @relation(fields: [vendor_id], references: [id])

  // relations
  variants      ProductVariant[]
  categories    Category[]  @relation("ProductCategories")
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@index([vendor_id])
  @@index([is_active])
  @@index([price])
  @@index([created_at])
}

model ProductVariant {
  id         String    @id @default(uuid())
  size       ShoeSize
  color      ShoeColor
  images      String[]
  stock      Int       @default(0)

  product_id String
  product    Product   @relation(fields: [product_id], references: [id])
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]  @relation("ProductCategories")
}

//
// CART + WISHLIST
//
model Cart {
  id         String     @id @default(uuid())
  cart_id    String     @unique @default(cuid()) // Human-readable cart ID like "CART-87901"
  user_id    String     @unique
  subtotal   Float      @default(0)
  discount   Float      @default(0)
  tax        Float      @default(0)
  shipping_fee Float    @default(0)
  total_amount Float    @default(0)
  currency   String     @default("INR")
  updated_at DateTime   @updatedAt
  created_at DateTime   @default(now())

  user       Users      @relation(fields: [user_id], references: [id])
  items      CartItem[]

  @@index([user_id])
  @@index([updated_at])
}

model CartItem {
  id          String   @id @default(uuid())
  quantity    Int      @default(1)
  price       Float    // Store price at time of adding to cart
  total       Float    // quantity * price
  product_id  String
  cart_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  product     Product  @relation(fields: [product_id], references: [id])
  cart        Cart     @relation(fields: [cart_id], references: [id])

  @@unique([cart_id, product_id]) // Prevent duplicate products in same cart
  @@index([cart_id])
  @@index([product_id])
}

model Wishlist {
  id           String         @id @default(uuid())
  wishlist_id  String         @unique @default(cuid()) // Human-readable wishlist ID like "WISHLIST-50219"
  user_id      String         @unique
  total_items  Int            @default(0)
  updated_at   DateTime       @updatedAt
  created_at   DateTime       @default(now())

  user         Users          @relation(fields: [user_id], references: [id])
  items        WishlistItem[]

  @@index([user_id])
  @@index([updated_at])
}

model WishlistItem {
  id            String   @id @default(uuid())
  product_id    String
  wishlist_id   String
  price         Float    // Store current price when added
  discount_price Float?  // Store discount price if available
  currency      String   @default("INR")
  added_at      DateTime @default(now())

  product       Product  @relation(fields: [product_id], references: [id])
  wishlist      Wishlist @relation(fields: [wishlist_id], references: [id])

  @@unique([wishlist_id, product_id]) // Prevent duplicate products in same wishlist
  @@index([wishlist_id])
  @@index([product_id])
  @@index([added_at])
}

//
// ORDERS + PAYMENTS
//
model Order {
  id          String       @id @default(uuid())
  status      OrderStatus  @default(PENDING)
  total_price Float
  created_at  DateTime     @default(now())

  user_id     String
  user        Users        @relation(fields: [user_id], references: [id])

  items       OrderItem[]
  payment     Payment?
}

model OrderItem {
  id          String   @id @default(uuid())
  quantity    Int      @default(1)
  price       Float

  order_id    String
  product_id  String

  order       Order    @relation(fields: [order_id], references: [id])
  product     Product  @relation(fields: [product_id], references: [id])
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String
  created_at  DateTime      @default(now())

  order_id    String @unique
  order       Order  @relation(fields: [order_id], references: [id])
}