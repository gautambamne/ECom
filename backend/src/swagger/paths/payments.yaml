# Payment Endpoints

/payments:
  get:
    tags:
      - Payments
    summary: Get user's payments
    description: Retrieves all payments for the authenticated user
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [PENDING, SUCCESS, FAILED]
        description: Filter payments by status
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number for pagination
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        description: Number of payments per page
    responses:
      '200':
        description: Payments retrieved successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentsListResponse'
            example:
              local_date_time: "2025-10-04T10:00:00.000Z"
              data:
                payments:
                  - id: "payment123"
                    order_id: "order123"
                    amount: 179.98
                    status: "SUCCESS"
                    method: "card"
                    created_at: "2023-10-01T10:00:00.000Z"
                    order:
                      id: "order123"
                      user_id: "user123"
                      status: "CONFIRMED"
                      total_price: 179.98
                      created_at: "2023-10-01T10:00:00.000Z"
                message: "Payments retrieved successfully"
              api_error: null
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

  post:
    tags:
      - Payments
    summary: Create a payment
    description: Creates a payment for an order
    security:
      - bearerAuth: []
      - cookieAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [orderId, amount, paymentMethod]
            properties:
              orderId:
                type: string
                description: Order ID to create payment for
                example: "order123"
              amount:
                type: number
                format: float
                description: Payment amount
                example: 179.98
              paymentMethod:
                type: string
                description: Payment method
                example: "card"
    responses:
      '201':
        description: Payment created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreateResponse'
            example:
              local_date_time: "2025-10-04T10:00:00.000Z"
              data:
                payment:
                  id: "payment123"
                  order_id: "order123"
                  amount: 179.98
                  status: "PENDING"
                  method: "card"
                  created_at: "2023-10-01T10:00:00.000Z"
                  order:
                    id: "order123"
                    user_id: "user123"
                    status: "PENDING"
                    total_price: 179.98
                    created_at: "2023-10-01T10:00:00.000Z"
                message: "Payment created successfully"
              api_error: null
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Order not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Invalid payment data or order already paid
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{paymentId}:
  get:
    tags:
      - Payments
    summary: Get payment by ID
    description: Retrieves a specific payment by its ID
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: paymentId
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    responses:
      '200':
        description: Payment retrieved successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentResponse'
            example:
              local_date_time: "2025-10-04T10:00:00.000Z"
              data:
                payment:
                  id: "payment123"
                  order_id: "order123"
                  amount: 179.98
                  status: "SUCCESS"
                  method: "card"
                  created_at: "2023-10-01T10:00:00.000Z"
                  order:
                    id: "order123"
                    user_id: "user123"
                    status: "CONFIRMED"
                    total_price: 179.98
                    created_at: "2023-10-01T10:00:00.000Z"
                message: "Payment retrieved successfully"
              api_error: null
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '403':
        description: Forbidden - Not the payment owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{paymentId}/process:
  post:
    tags:
      - Payments
    summary: Process payment
    description: Processes a pending payment (simulates payment gateway processing)
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: paymentId
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    responses:
      '200':
        description: Payment processed successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentResponse'
            example:
              local_date_time: "2025-10-04T10:00:00.000Z"
              data:
                payment:
                  id: "payment123"
                  order_id: "order123"
                  amount: 179.98
                  status: "SUCCESS"
                  method: "card"
                  created_at: "2023-10-01T10:00:00.000Z"
                  order:
                    id: "order123"
                    user_id: "user123"
                    status: "CONFIRMED"
                    total_price: 179.98
                    created_at: "2023-10-01T10:00:00.000Z"
                message: "Payment processed successfully"
              api_error: null
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Payment cannot be processed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{paymentId}/status:
  patch:
    tags:
      - Payments
    summary: Update payment status (Admin only)
    description: Updates the status of a payment. Only admins can update payment status.
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: paymentId
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [status]
            properties:
              status:
                type: string
                enum: [PENDING, SUCCESS, FAILED]
                description: New payment status
                example: "SUCCESS"
    responses:
      '200':
        description: Payment status updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentResponse'
            example:
              local_date_time: "2025-10-04T10:00:00.000Z"
              data:
                payment:
                  id: "payment123"
                  order_id: "order123"
                  amount: 179.98
                  status: "SUCCESS"
                  method: "card"
                  created_at: "2023-10-01T10:00:00.000Z"
                  order:
                    id: "order123"
                    user_id: "user123"
                    status: "CONFIRMED"
                    total_price: 179.98
                    created_at: "2023-10-01T10:00:00.000Z"
                message: "Payment status updated successfully"
              api_error: null
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '403':
        description: Forbidden - Not an admin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Invalid status transition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{paymentId}/refund:
  post:
    tags:
      - Payments
    summary: Refund payment
    description: Processes a refund for a successful payment
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: paymentId
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    responses:
      '200':
        description: Payment refunded successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentResponse'
            example:
              local_date_time: "2025-10-04T10:00:00.000Z"
              data:
                payment:
                  id: "payment123"
                  order_id: "order123"
                  amount: 179.98
                  status: "REFUNDED"
                  method: "card"
                  created_at: "2023-10-01T10:00:00.000Z"
                  order:
                    id: "order123"
                    user_id: "user123"
                    status: "CANCELLED"
                    total_price: 179.98
                    created_at: "2023-10-01T10:00:00.000Z"
                message: "Payment refunded successfully"
              api_error: null
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '403':
        description: Forbidden - Not the payment owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Payment cannot be refunded
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'