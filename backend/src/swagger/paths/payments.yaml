# Payment Endpoints

/payments:
  get:
    tags:
      - Payments
    summary: Get user's payments
    description: Retrieves all payments for the authenticated user
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [PENDING, SUCCESS, FAILED]
        description: Filter payments by status
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number for pagination
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        description: Number of payments per page
    responses:
      '200':
        description: Payments retrieved successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
            example:
              success: true
              message: "Payments retrieved successfully"
              data:
                payments:
                  - id: "payment123"
                    orderId: "order123"
                    amount: 179.98
                    status: "SUCCESS"
                    paymentMethod: "Credit Card"
                    transactionId: "txn_1234567890"
                    createdAt: "2023-10-01T10:00:00Z"
                    order:
                      id: "order123"
                      totalAmount: 179.98
                pagination:
                  page: 1
                  limit: 10
                  total: 3
                  totalPages: 1
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/create:
  post:
    tags:
      - Payments
    summary: Create a payment
    description: Creates a payment for an order
    security:
      - bearerAuth: []
      - cookieAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [orderId, paymentMethod]
            properties:
              orderId:
                type: string
                description: Order ID to create payment for
                example: "order123"
              paymentMethod:
                type: string
                description: Payment method
                example: "Credit Card"
              paymentDetails:
                type: object
                description: Additional payment details
                properties:
                  cardNumber:
                    type: string
                    description: Credit card number (masked)
                    example: "**** **** **** 1234"
                  expiryDate:
                    type: string
                    description: Card expiry date
                    example: "12/25"
    responses:
      '201':
        description: Payment created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
            example:
              success: true
              message: "Payment created successfully"
              data:
                payment:
                  id: "payment123"
                  orderId: "order123"
                  amount: 179.98
                  status: "PENDING"
                  paymentMethod: "Credit Card"
                  createdAt: "2023-10-01T10:00:00Z"
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Order not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Invalid payment data or order already paid
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{id}:
  get:
    tags:
      - Payments
    summary: Get payment by ID
    description: Retrieves a specific payment by its ID
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    responses:
      '200':
        description: Payment retrieved successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
            example:
              success: true
              message: "Payment retrieved successfully"
              data:
                payment:
                  id: "payment123"
                  orderId: "order123"
                  amount: 179.98
                  status: "SUCCESS"
                  paymentMethod: "Credit Card"
                  transactionId: "txn_1234567890"
                  createdAt: "2023-10-01T10:00:00Z"
                  order:
                    id: "order123"
                    totalAmount: 179.98
                    status: "CONFIRMED"
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '403':
        description: Forbidden - Not the payment owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{id}/confirm:
  put:
    tags:
      - Payments
    summary: Confirm payment
    description: Confirms a pending payment (typically called by payment gateway webhook)
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [transactionId]
            properties:
              transactionId:
                type: string
                description: Transaction ID from payment gateway
                example: "txn_1234567890"
              status:
                type: string
                enum: [SUCCESS, FAILED]
                description: Payment status
                example: "SUCCESS"
    responses:
      '200':
        description: Payment confirmed successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
            example:
              success: true
              message: "Payment confirmed successfully"
              data:
                payment:
                  id: "payment123"
                  status: "SUCCESS"
                  transactionId: "txn_1234567890"
                  updatedAt: "2023-10-01T10:05:00Z"
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Payment cannot be confirmed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'

/payments/{id}/refund:
  put:
    tags:
      - Payments
    summary: Refund payment (Admin only)
    description: Processes a refund for a successful payment. Only admins can process refunds.
    security:
      - bearerAuth: []
      - cookieAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: Payment ID
        example: "payment123"
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              reason:
                type: string
                description: Reason for refund
                example: "Customer requested cancellation"
              amount:
                type: number
                format: decimal
                description: Refund amount (defaults to full payment amount)
                example: 89.99
    responses:
      '200':
        description: Payment refunded successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
            example:
              success: true
              message: "Payment refunded successfully"
              data:
                payment:
                  id: "payment123"
                  status: "REFUNDED"
                  refundAmount: 179.98
                  refundReason: "Customer requested cancellation"
                  updatedAt: "2023-10-01T14:00:00Z"
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '403':
        description: Forbidden - Not an admin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '404':
        description: Payment not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      '400':
        description: Bad request - Payment cannot be refunded
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'